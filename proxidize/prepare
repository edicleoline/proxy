set -E
trap '[ "$?" -ne 77 ]||exit 77' ERR
GET_PRIVILAGE() { if [[ ! "${EUID}" == 0 ]]; then
    printf "ERROR MUST RUN UNDER ADMIN SU PRIVILAGE\n"
    exit 77
fi; }
GET_PRIVILAGE
DECLARE_ESS_VARS() {
    PROJECT_NAME='proxidize'
    if [[ "$*" == *"debug"* ]]; then
        DEBUGGING="true"
        echo "DEBUGGING!"
        sleep 1
    fi
    DOWNLOAD_URL="pxfile.com"
    export PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin"
    INSTALLATION_LOG="/var/log/installation.log"
    #LOCAL_SYSLINK="/usr/local/bin/proxidize"
    PKG_MANAGER="apt-get"
    UPDATE_PKG_CACHE="${PKG_MANAGER} update"
    SHOW_ROUTE="ip -o -4 route show to default"
    PKG_INSTALL=(${PKG_MANAGER} --yes --no-install-recommends install)
    DISTRO_COMPILER="make"
    MAKE_EXECUTABLE="chmod +x"
    PKG_COUNT="${PKG_MANAGER} -s -o Debug::NoLocking=true upgrade | grep -c ^Inst || true"
    APT_SOURCES="/etc/apt/sources.list"
    PKG_INSTALLER="${PKG_MANAGER} install"
    LOCAL_DIRECTORY="/usr/local/etc"
    CURRENT_WORKING_DIRECTORY="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
    LOGFILE="/var/log/prepare.log"
}
DECLARE_ESS_VARS $*
MISC() {
    echo "1" >"/proc/sys/net/ipv4/conf/all/ignore_routes_with_linkdown"
    echo "net.ipv4.conf.all.ignore_routes_with_linkdown=1" >"/etc/sysctl.d/10-linkdown.conf"
    sysctl -qp "/etc/sysctl.d/10-linkdown.conf"
    mkdir /etc/info &>>$LOGFILE
    export PATH="$PATH:/sbin:/usr/sbin:usr/local/sbin"
    WIFI_OFF() {
        ROUTING_EMTRIES=$(ip -o route show all)
        if [[ "$ROUTING_EMTRIES" == *"wl"* ]]; then
            echo ""
            echo "ERROR: WIFI MUST BE OFF."
            exit 77
        fi
    }
    WIFI_OFF
}
MISC
GET_DISTRO() { if [[ "$OSTYPE" == *"linux"* ]]; then
    RELEASE=$(cat /etc/os-release)
    if [[ "$RELEASE" == *"ID=raspbian"* ]]; then RELEASE="RASPBIAN"; elif [[ "$RELEASE" == *"ID=debian"* ]]; then RELEASE="DEBIAN"; elif [[ "$RELEASE" == *"ID=ubuntu"* ]]; then RELEASE="UBUNTU"; else
        printf "ERROR, SCRIPT CAN ONLY RUN ON RASPBERRY PI OS, UBUNTU OR DEBIAN\n"
        exit 77
    fi
else
    printf "ERROR, SCRIPT CAN ONLY RUN ON LINUX SYSTEMS\n"
    exit 77
fi; }
GET_DISTRO
GET_ROUTER_IP() {
    ROUTER_IP=$(hostname -I | awk '{ print $1 }')
    echo "$ROUTER_IP" >"/etc/info/router-ip"
    ROUTER_NAME=$(ip route | awk '{ print $5 }' | sed '1!d')
    echo "$ROUTER_NAME" >"/etc/info/router-name"
    ROUTER_DEFAULT_GATEWAY=$(ip route show to default | awk '{print $3}' | sed '1!d')
    echo "$ROUTER_DEFAULT_GATEWAY" >"/etc/info/router-gateway"
}
GET_ROUTER_IP
GET_CPU_ARCH() {
    ARCH_INFO=$(uname -m)
    if [[ $ARCH_INFO == *"86_64"* ]]; then export CPU_ARCH="x86_64"; elif [[ $ARCH_INFO == *"32"* ]]; then
        export CPU_ARCH="x86_32"
        echo "ERROR: 32 BIT CPU. NOT SUPPORTED YET."
        exit 77
    elif [[ $ARCH_INFO == *"armv7"* ]]; then export CPU_ARCH="arm"; elif [[ $ARCH_INFO == *"armv8"* ]]; then export CPU_ARCH="arm"; elif [[ $ARCH_INFO == *"aarch64"* ]]; then export CPU_ARCH="arm64"; else
        echo "ERROR: UNABLE TO DETERMINE CPU ARCH!"
        exit 77
    fi
}
GET_CPU_ARCH
INSTALL_ESS_LIBRARIES() {
    ${UPDATE_PKG_CACHE}
    ${PKG_MANAGER} upgrade -y
    ${PKG_INSTALLER} multiarch-support -y
    ${PKG_INSTALLER} libc6 -y
    ${PKG_INSTALLER} libudev1 -y
    ${PKG_INSTALLER} libusb-1.0-0 -y
    ${PKG_INSTALLER} usbutils -y
    ${PKG_INSTALLER} usb-modeswitch -y
    ${PKG_INSTALLER} curl -y
    ${PKG_INSTALLER} libusb-dev -y
    ${PKG_INSTALLER} build-essential -y
    ${PKG_INSTALLER} libevent-dev -y
    ${PKG_INSTALLER} libssl-dev -y
    ${PKG_INSTALLER} psmisc -y
    ${PKG_INSTALLER} sshpass -y
    ${PKG_INSTALLER} fail2ban -y
    ${PKG_INSTALLER} libc6-dev -y
    ${PKG_INSTALLER} libbsd-dev -y
    ${PKG_INSTALLER} libevent-dev -y
    ${PKG_INSTALLER} libpcap-dev -y
    ${PKG_INSTALLER} gcc -y
    ${PKG_INSTALLER} unzip
    ${PKG_INSTALLER} make -y
    ${PKG_INSTALLER} pkg-config -y
    ${PKG_INSTALLER} p7zip* -y
    ${PKG_INSTALLER} sudo -y
    ${PKG_INSTALLER} python3.8 -y
    ${PKG_INSTALLER} python3-pip -y
    ${PKG_INSTALLER} jq -y
    ${PKG_INSTALLER} git -y
    ${PKG_INSTALLER} xml-twig-tools -y
    ${PKG_INSTALLER} uuid-runtime -y
    ${PKG_INSTALLER} sqlite3 -y
    ${PKG_INSTALLER} procps -y
    ${PKG_INSTALLER} dhcpcd5 -y
    ${PKG_INSTALLER} libusb-1.0-0-dev -y
    ${PKG_INSTALLER} util-linux -y
    ${PKG_INSTALLER} apache2 -y
    ${PKG_INSTALLER} python3-dev -y
    ${PKG_INSTALLER} python3-setuptools -y
    ${PKG_INSTALLER} libapache2-mod-wsgi -y
    ${PKG_INSTALLER} libapache2-mod-wsgi-py3 -y
    ${PKG_INSTALLER} python3-pip -y
    ${PKG_INSTALLER} automake -y
    ${PKG_MANAGER} install psmisc
    ${PKG_MANAGER} install python3 -y
    ${PKG_MANAGER} install python3-pip -y
    pip install setuptools
    pip install scapy
    pip install dpkt
    pip3 install testresources >/dev/null 2>&1
    wget arm.$DOWNLOAD_URL/requirements.txt >/dev/null 2>&1
    pip3 install -r ./requirements.txt >/dev/null 2>&1
    pip3 install django-compression-middleware==0.4.1
    systemctl enable dhcpcd
    systemctl start dhcpcd
}
INSTALL_ESS_LIBRARIES
CHECK_ILLEGAL_DAEMONS() {
    #apt-get -y purge network-manager*
    apt-get -y purge knetworkmanager*
    apt-get -y purge modemmanager*
    apt-get -y purge networkd*
    apt-get -y purge netplan*
    #apt-get -y purge net-tools
    apt-get -y purge ethtool
    apt-get -y purge wicd-gtk
    apt-get -y purge ufw
    apt-get -y purge ifupdown
    apt-get -y purge libreoffice*
    apt-get -y autoremove
    rm -rf /etc/network
    rm -rf /etc/netplan
    rm -f /etc/networks
    rm -rf /etc/networkd-dispacher
    rm -f /etc/init.d/networking
    apt-get -y autoremove
    apt-get install -f
}
CHECK_ILLEGAL_DAEMONS
CLEAN_FIREWALL() {
    iptables -F
    iptables -t mangle -F
    iptables -t nat -F
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -A INPUT -p tcp --match multiport --dport 22 -j ACCEPT
}
CLEAN_FIREWALL >>"$INSTALLATION_LOG"
FIX_NAMING() { if [[ "$RELEASE" == "DEBIAN" ]] || [[ "$RELEASE" == "UBUNTU" ]]; then
    sed -i '/GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"' /etc/default/grub
    update-grub
elif [[ "$RELEASE" == "CENTOS" ]]; then break; fi; }
FIX_NAMING
PREPARE_SUDOERS() {
    proxidize_user=" thifani"
    sudo useradd -p $(openssl passwd -1 adminadmin)$proxidize_user
    SUDOER_USERNAME=$(who | sed '1!d' | awk '{print $1}')
    SUDOER_USERNAME="thifani"
    APACHE_USER=$(awk -F= '$1 == "export APACHE_RUN_USER" {print $2}' /etc/apache2/envvars)
    if [[ -z $SUDOER_USERNAME ]]; then
        echo "ERROR: UNABLE TO DETERMINE USERNAME"
        exit 77
    fi
    /sbin/adduser $SUDOER_USERNAME sudo >/dev/null 2>&1
    /sbin/adduser root sudo >/dev/null 2>&1
    echo "$SUDOER_USERNAME    ALL=(ALL) NOPASSWD:ALL" >>"/etc/sudoers"
    echo "root    ALL=(ALL) NOPASSWD:ALL" >>"/etc/sudoers"
    echo "$APACHE_USER    ALL=(ALL) NOPASSWD:ALL" >>"/etc/sudoers"
}
PREPARE_SUDOERS
USB_MODE_DATA() {
    rm -rf mode_data*
    wget arm.$DOWNLOAD_URL/mode_data.zip &>>$LOGFILE
    unzip -o mode_data.zip &>>$LOGFILE
    cd mode_data
    /bin/cp 40-usb_modeswitch.rules /lib/udev/rules.d/ &>>$LOGFILE
    /bin/cp -a usb_modeswitch.d/* /etc/usb_modeswitch.d/ &>>$LOGFILE
    make &>>$LOGFILE
    make install &>>$LOGFILE
    cd ..
    rm -rf mode_data &>>$LOGFILE
    udevadm control --reload-rules
    udevadm trigger
}
USB_MODE_DATA
# MAKE_PROXIDIZE_INSTALL() {
#     if [[ $CPU_ARCH == *"x86"* ]]; then echo 'rm -f ./install;wget -q --no-cache x86.pxfile.com/install;chmod +x ./install;sudo ./install $*' >"/usr/bin/proxidize-install"; elif [[ $CPU_ARCH == *"arm64"* ]]; then echo 'rm -f ./install;wget -q --no-cache arm64.pxfile.com/install;chmod +x ./install;sudo ./install $*' >"/usr/bin/proxidize-install"; elif [[ $CPU_ARCH == *"arm"* ]]; then echo 'rm -f ./install;wget -q --no-cache arm.pxfile.com/install;chmod +x ./install;sudo ./install $*' >"/usr/bin/proxidize-install"; fi
#     chmod +x "/usr/bin/proxidize-install"
#     chmod +x "/usr/bin/proxidize"
# }
# MAKE_PROXIDIZE_INSTALL
echo "WILL REBOOT ONCE..."
sleep 2
if [[ "$DEBUGGING" == true ]]; then exit 0; fi
/sbin/reboot
